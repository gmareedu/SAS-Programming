OPTIONS COMPRESS=YES ;
%LET PATH = /G/Giridhar/SAS;

LIBNAME SASDATA "&PATH./SASDATA";

/*MACRO TO PRINT CONTROL TOTALS*/

%MACRO CONTOT(LIBNAME =,DATASET=,VAR=);
   PROC SUMMARY DATA= &LIBNAME..&DATASET. NWAY MISSING;
       VAR &VAR.;
       OUTPUT OUT = &DATASET._SUMM (KEEP = _FREQ_ &VAR.) SUM=;
   RUN;
   %LET CNT = %EVAL(((%SYSFUNC(LENGTH(&VAR.))) - (%SYSFUNC(LENGTH(%SYSFUNC(COMPRESS(&VAR.))))))+1);
   DATA _NULL_;
       SET &DATASET._SUMM;
       FORMAT _FREQ_ COMMA30.;
       FORMAT &VAR. DOLLAR30.2;
       PUT @5 "---------------------------------------------------------------------------------------"/;
       PUT @5 "RECORD COUNT & CONTROL TOTALS FOR &DATASET. "/;
       PUT @5 "RECORD COUNT = " _FREQ_/;
       %DO I = 1 %TO &CNT.;
           %LET VAR1 = %SCAN(&VAR.,&I.);
           PUT @5 "&VAR1. = " &VAR1./;
       %END;
       PUT @5 "---------------------------------------------------------------------------------------"/;
   RUN;
%MEND;

******************************************************************************;
***              MACRO TO EXPORT DATASETS INTO EXCEL
******************************************************************************;
%MACRO EXPORT_EXCEL(DATASET,OUTFILE,SHEET);
PROC EXPORT DATA= SASDATA.&DATASET.
            OUTFILE= "&PATH./OUTPUT/&OUTFILE." 
            DBMS=XLSX REPLACE;
            SHEET="&SHEET."; 
       RUN;
%MEND;

******************************************************************************;
***              MACRO TO EXPORT DATASETS IN PIPE DELIMITED FORMAT
******************************************************************************;
%MACRO EXPORT_DELIM(DATASET);
       PROC EXPORT DATA=SASDATA.&DATASET. 
			OUTFILE="&PATH./output/&DATASET..txt"
			DBMS=DLM
			REPLACE;
			DELIMITER='|';
       RUN;
%MEND;


/*Reading in data(Journal Entry Data)*/
/*For pipe delimited data*/

%MACRO JEREAD(IN,OUT,ENT);

DATA SASDATA.RAWJE_&OUT.;
LENGTH FILE_ID ACCOUNT $100.;
INFILE "&PATH./RAWDATA/&IN..txt" TRUNCOVER dlm='|' FIRSTOBS=2 DSD LRECL=32768;
INPUT
ENTITY   :   $100.
DAYBOOK   :   $100.
VOUCHER   :   $100.
JOURNAL_ENTRY_DESC   :   $300.
JOURNAL_LINE_DESC   :   $300.
FISCAL_PERIOD_YR   :   $10.
POSTED_DATE   :   mmddyy10.
EFFECTIVE_DATE   :   mmddyy10.
USER_ID   :   $100.
TRANSACTION_SOURCE :   $100.
GL_ACCOUNT   :   $100.
BASE_CURRENCY_DEBIT   :   BEST32.
BASE_CURRENCY_CREDIT   :   BEST32.
TRANSACTION_CURRENCY_DEBIT   :   BEST32.
TRANSACTION_CURRENCY_CREDIT   :   BEST32.
LOCAL_CURRENCY   :   $10.
CREATOR_USER_NAME   :   $100.
APPROVER_ID   :   $100.;

IF COMPRESS(GL_ACCOUNT) NE "" THEN DO;
ACCOUNT="&ENT.-"||COMPRESS(GL_ACCOUNT);
END;
FILE_ID="&IN.";
ROW_ID=_N_;

%MEND ;

%JEREAD(File1,ABC_Q3,ABC);
%JEREAD(File2,ABC_P10,ABC);
%JEREAD(File3,ABE_Q3,ABE);
%JEREAD(File4,ABE_P10,ABE);
%JEREAD(File5,ABG_Q3,ABG);
%JEREAD(File6,ABG_P10,ABG);
%JEREAD(File7,ABCS_Q3,ABCS);
%JEREAD(File8,ABCS_P10,ABCS);
%JEREAD(File9,ABCT_Q3,ABCT);
%JEREAD(File10,ABCT_P10,ABCT);

/*Data step to exlcude data which arent supposed to be the part of current analysis*/

DATA SASDATA.JE_ALL EXCL;
LENGTH ACCOUNT $100. YEAR PERIOD $10.;
SET SASDATA.RAWJE_ABC_Q3 SASDATA.RAWJE_ABC_P10 SASDATA.RAWJE_ABE_Q3 SASDATA.RAWJE_ABE_P10 SASDATA.RAWJE_ABG_Q3 SASDATA.RAWJE_ABG_P10 SASDATA.RAWJE_ABCS_Q3 SASDATA.RAWJE_ABCS_P10 SASDATA.RAWJE_ABCT_Q3 SASDATA.RAWJE_ABCT_P10;
DEBIT=BASE_CURRENCY_DEBIT;
CREDIT=BASE_CURRENCY_CREDIT;
AMOUNT = DEBIT-CREDIT;
PERIOD=SUBSTR(FISCAL_PERIOD_YR,5);
YEAR=SUBSTR(FISCAL_PERIOD_YR,1,4);
IF AMOUNT = . THEN AMOUNT = 0.00;
IF DEBIT=. THEN DEBIT=0.00;
IF CREDIT=. THEN DEBIT=0.00;
FORMAT DEBIT AMOUNT CREDIT BEST32.;
/*Statement to exclude data(arbitrary logic for implementation purpose)*/
IF ENTITY ="XYZ" OR DAYBOOK="2017BP" OR (ENTITY="ABCS" AND (INDEX(UPCASE(COMPRESS(JOURNAL_ENTRY_DESC)),"BUDGET")>0 OR 
										 INDEX(UPCASE(COMPRESS(JOURNAL_ENTRY_DESC)),"FORECASTEDSALES")>0))
THEN OUTPUT EXCL;
ELSE OUTPUT SASDATA.JE_ALL;

RUN;
%CONTOT(LIBNAME=SASDATA, DATASET=JE_ALL, VAR= DEBIT CREDIT AMOUNT);
%CONTOT(LIBNAME=WORK, DATASET=EXCL, VAR= DEBIT CREDIT AMOUNT);

*********************************************************************************************;
***PERFORMING DATA QUALITY CHECKS BY SUMMARIZING ON KEY FIELDS TO FIND POTENTIAL ANOMALIES***
*********************************************************************************************;

/* The same can be done using PROC Summary but for better readability I have used PROC SQL*/
PROC SQL; 
CREATE TABLE SASDATA.CURRENCY_SUMM AS
	SELECT  LOCAL_CURRENCY, 
			SUM(TRANSACTION_CURRENCY_DEBIT) AS TRAN_DEBIT_AMT,
			SUM(TRANSACTION_CURRENCY_CREDIT) AS TRAN_CREDIT_AMT,
			SUM(BASE_CURRENCY_DEBIT) AS BASE_DEBIT_AMT,
			SUM(BASE_CURRENCY_CREDIT) AS BASE_CREDIT_AMT,
					COUNT(*) AS COUNT
	FROM SASDATA.JE_ALL
	GROUP BY LOCAL_CURRENCY;
QUIT;

PROC SUMMARY DATA=SASDATA.JE_ALL NWAY MISSING;
CLASS ENTITY DAYBOOK;
VAR DEBIT CREDIT AMOUNT;
OUTPUT OUT=SASDATA.DAYBOOK_SUMM(DROP=_TYPE_ RENAME=_FREQ_=JE_COUNT) SUM=;
RUN;

%MACRO SUMMARIES(DSN,FIELD);
PROC SQL; 
CREATE TABLE SASDATA.&DSN. AS
	SELECT  &FIELD., 
			SUM(DEBIT) AS DEBIT_AMT,
			SUM(CREDIT) AS CREDIT_AMT,
			SUM(AMOUNT) AS TOTAL_AMT,
			COUNT(*) AS COUNT
	FROM SASDATA.JE_ALL
	GROUP BY &FIELD.;
QUIT;
%MEND;
%SUMMARIES(ENTITY_SUMM,ENTITY);
%SUMMARIES(SOURCE_SUMM,TRANSACTION_SOURCE);
%SUMMARIES(USER_SUMM,USER_ID);
%SUMMARIES(APPROVER_SUMM,APPROVER_ID);
%SUMMARIES(VOUCHER_SUMM,VOUCHER);
%SUMMARIES(ACCOUNT_SUMM,ACCOUNT);
%EXPORT_EXCEL(ACCOUNT_SUMM,JE_ACCOUNT_SUMMARY,ACC_SUMM);

/*Small check to see if we have a transaction which is only partially recorded*/
DATA SASDATA.CHECK_JE_ID;
SET SASDATA.VOUCHER_SUMM;
IF ABS(TOTAL_AMT)>1;
RUN;

/*Creating a period(month) wise summary to get a brief overview on the data*/
PROC SQL;
CREATE TABLE SASDATA.UNQPERIOD AS SELECT DISTINCT(PERIOD), 
COUNT(*) AS JE_LINES, 
SUM(DEBIT) AS DEBIT_AMOUNT,
SUM(CREDIT) AS CREDIT_AMOUNT,
SUM(AMOUNT) AS AMOUNT,
MIN(EFFECTIVE_DATE) AS MIN_EFFECTIVE_DATE FORMAT = MMDDYY10., 
MAX(EFFECTIVE_DATE) AS MAX_EFFECTIVE_DATE FORMAT = MMDDYY10.,
NMISS(EFFECTIVE_DATE) AS MISS_EFFECTIVE_DATE FORMAT BEST32.,
MIN(POSTED_DATE) AS MIN_POSTED_DATE FORMAT = MMDDYY10., 
MAX(POSTED_DATE) AS MAX_POSTED_DATE FORMAT = MMDDYY10.,
NMISS(POSTED_DATE) AS MISS_POSTED_DATE FORMAT BEST32.
FROM SASDATA.JE_ALL GROUP BY PERIOD;
QUIT;

/*Exporting all the reports into a single excel file for inspection*/
%EXPORT_EXCEL(UNQPERIOD,DQC,PERIOD SUMMARY);
%EXPORT_EXCEL(ENTITY_SUMM,DQC,ENTITY SUMMARY);
%EXPORT_EXCEL(SOURCE_SUMM,DQC,SOURCE SUMMARY);
%EXPORT_EXCEL(USER_SUMM,DQC,USER_ID SUMMARY);
%EXPORT_EXCEL(CURRENCY_SUMM,DQC,CURRENCY SUMMARY);
%EXPORT_EXCEL(APPROVER_SUMM,DQC,APPROVER_ID SUMMARY);
%EXPORT_EXCEL(VOUCHER_SUMM,JE_ID_SUMMARY,JE_ID SUMMARY);


/*Reading in Trial Balance Data which is to be reconciled with the JE data read in earlier*/


%MACRO TB_READIN(INFILE,OUTFILE);
DATA SASDATA.&OUTFILE.   ;
INFILE "&PATH./RAWDATA/Client P7P10 TB.txt" DELIMITER='09'X MISSOVER DSD LRECL=32767 FIRSTOBS=2 ;
INPUT
       ACCT     	                 :      $100.
       ABE                           :      BEST32.2
	   ABG                           :      BEST32.2
	   ABCS                          :      BEST32.2
	   ABCT                          :      BEST32.2
	   VENCHURS                      :      BEST32.2
	   ABC                           :      BEST32.2
	   ELIM                          :      BEST32.2
	   TOTAL                         :      BEST32.2
    ;
    RUN;
%MEND;

%TB_READIN(Client P7P10 TB,P7P10_TB);

%MACRO TB(ENT);

DATA SASDATA.TB_&ENT.(KEEP = ACCT ACCOUNT ACCT_DESCR BS_IS BEGIN_BALANCE END_BALANCE) WORK.TB_EXCL(KEEP = ACCT ACCOUNT ACCT_DESCR BEGIN_BALANCE END_BALANCE);
SET SASDATA.P7P10_TB ;
FORMAT ACCOUNT $100. ACCT_DESCR $200.;
ENT = "&ENT.";
/*Creating fields based on other fields*/
ACCOUNT1=SCAN(STRIP(ACCT),1," ");
IF SUBSTR(ACCOUNT1,1,1)   IN ( "1" "2" ) then  BS_IS = "BS";
ELSE BS_IS="IS";
ACCT_DESCR=SUBSTR(ACCT,8);
ACCOUNT = CATX("-",COMPRESS(ENT),COMPRESS(ACCOUNT1));
BEGIN_BALANCE = 0.00;
END_BALANCE = &ENT.;
IF BEGIN_BALANCE = . THEN BEGIN_BALANCE = 0.00; 
IF END_BALANCE = . THEN END_BALANCE=0.00; 
FORMAT BEGIN_BALANCE END_BALANCE 32.2;
IF SUBSTRN(COMPRESS(ACCT),1,1) IN ("0" "1" "2" "3" "4" "5" "6" "7" "8" "9") THEN OUTPUT SASDATA.TB_&ENT.;
ELSE OUTPUT WORK.TB_EXCL;
RUN;

%MEND;

%TB(ABE);
%TB (ABG);
%TB (ABCS);
%TB (ABCT);
%TB (ABC);

DATA TB_END;
SET SASDATA.TB_ABE SASDATA.TB_ABG SASDATA.TB_ABCS SASDATA.TB_ABCT SASDATA.TB_ABC;
RUN;

%MACRO TB_READIN(INFILE,OUTFILE);
DATA SASDATA.&OUTFILE.   ;
INFILE "&path./RAWDATA/END_TB.txt" DELIMITER='09'X MISSOVER DSD LRECL=32767 FIRSTOBS=2 ;
INPUT
       ACCT     	                 :      $100.
       ABE                           :      BEST32.2
	   ABG                           :      BEST32.2
	   ABCS                          :      BEST32.2
	   ABCT                          :      BEST32.2
	   VENCHURS                      :      BEST32.2
	   ABC                           :      BEST32.2
	   ELIM                          :      BEST32.2
	   TOTAL                         :      BEST32.2
    ;
    RUN;
%MEND;

%TB_READIN(BEG_TB ,P7P10_BEG_TB);

%MACRO TB(ENT);

DATA SASDATA.TB_BEG_&ENT.(KEEP = ACCT ACCOUNT ACCT_DESCR BS_IS BEGIN_BALANCE END_BALANCE) WORK.TB_EXCL(KEEP = ACCT ACCOUNT ACCT_DESCR BEGIN_BALANCE END_BALANCE);
SET SASDATA.P7P10_BEG_TB ;
FORMAT ACCOUNT $100. ACCT_DESCR $200.;
ENT = "&ENT.";
/*Creating fields based on other fields*/
ACCOUNT1=SCAN(STRIP(ACCT),1," ");
IF SUBSTR(ACCOUNT1,1,1)   IN ( "1" "2" ) then  BS_IS = "BS";
ELSE BS_IS="IS";
ACCT_DESCR=SUBSTR(ACCT,8);
ACCOUNT = CATX("-",COMPRESS(ENT),COMPRESS(ACCOUNT1));
BEGIN_BALANCE =&ENT.;
IF BEGIN_BALANCE = . THEN BEGIN_BALANCE = 0.00; 
IF END_BALANCE = . THEN END_BALANCE=0.00; 
FORMAT BEGIN_BALANCE END_BALANCE 32.2;
IF SUBSTRN(COMPRESS(ACCT),1,1) IN ("0" "1" "2" "3" "4" "5" "6" "7" "8" "9") THEN OUTPUT SASDATA.TB_BEG_&ENT.;
ELSE OUTPUT WORK.TB_EXCL;
RUN;

%MEND;

%TB(ABE);
%TB (ABG);
%TB (ABCS);
%TB (ABCT);
%TB (ABC);

DATA TB_BEG;
SET SASDATA.TB_BEG_ABE SASDATA.TB_BEG_ABG SASDATA.TB_BEG_ABCS SASDATA.TB_BEG_ABCT SASDATA.TB_BEG_ABC;
RUN;


DATA TB_ALL;
SET TB_BEG TB_END;
RUN;

PROC SUMMARY DATA=TB_ALL NWAY MISSING;
CLASS ACCOUNT;
VAR BEGIN_BALANCE END_BALANCE;
ID ACCT_DESCR BS_IS;
OUTPUT OUT=SASDATA.TB_SUMM(DROP=_TYPE_ _FREQ_) SUM=;
RUN;


***************************************************************************
********** RECONCILIATION PERFORMED BY MERGING THE SUMMARIZIED DATA********
***************************************************************************;
DATA SASDATA.RECON ;
RETAIN ACCOUNT ACCT_DESCR COUNT FOUND_IN BS_IS DEBIT_AMT CREDIT_AMT JE_ACTIVITY BEGIN_BALANCE END_BALANCE TB_ACTIVITY DIFFERENCE ABS_DIFFERENCE;
MERGE SASDATA.ACCOUNT_SUMM(IN=A) SASDATA.TB_SUMM (IN=B);
BY ACCOUNT;
LENGTH FOUND_IN $15. STATUS $30.;


            IF A AND B THEN FOUND_IN = "BOTH";
            IF A AND NOT B THEN FOUND_IN = "JE_ONLY";
            IF B AND NOT A THEN FOUND_IN= "TB_ONLY";
            IF DEBIT_AMT =. THEN DEBIT_AMT = 0;
            IF CREDIT_AMT =. THEN CREDIT_AMT = 0;
            IF END_BALANCE =. THEN END_BAL = 0;
            IF BEGIN_BALANCE =. THEN BEG_BAL = 0;

            JE_ACTIVITY = SUM(DEBIT_AMT,-CREDIT_AMT);

            TB_ACTIVITY=END_BALANCE-BEGIN_BALANCE;
	    DIFFERENCE = SUM(JE_ACTIVITY,-TB_ACTIVITY);
            ABS_DIFFERENCE = ABS(DIFFERENCE);

            IF ABS_DIFFERENCE GT 1 THEN STATUS="OUT OF BALANCE";
            ELSE STATUS="IN BALANCE";
RUN;

/*Sorting Data*/
PROC SORT DATA=SASDATA.RECON;BY DESCENDING ABS_DIFFERENCE ;RUN;

/*Subsetting Data*/
DATA SASDATA.UNRECON;
SET SASDATA.RECON;
IF ABS_DIFFERENCE GT 1 THEN OUTPUT SASDATA.UNRECON;
RUN;

/*Calling a macro to export the final merged data report*/
%EXPORT_EXCEL(RECON,Reconciliation Report,Reconciliation Report);
